/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        Return {
            bindings = <&kp RET>;
            key-positions = <21 20>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <38 39>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
        };

        HJ_N {
            bindings = <&kp N>;
            key-positions = <18 19>;
        };

        JK_M {
            bindings = <&kp M>;
            key-positions = <19 20>;
        };

        SD_C {
            bindings = <&kp C>;
            key-positions = <13 14>;
        };

        DF_V {
            bindings = <&kp V>;
            key-positions = <15 16>;
        };

        FG_B {
            bindings = <&kp B>;
            key-positions = <16 17>;
        };

        Command {
            bindings = <&kp LEFT_COMMAND>;
            key-positions = <37 38>;
        };

        layer_toggle {
            bindings = <&mo 1>;
            key-positions = <39 40>;
        };
    };

    behaviors {
        SPCx2_Period: SPCx2_Period {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp PERIOD>;
        };

        Jx2_3: Jx2_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "JX2_3";
            #binding-cells = <0>;
            bindings = <&kp J>, <&kp COMMA>, <&kp PERIOD>;
        };

        Kx2_3: Kx2_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "KX2_3";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp QUESTION>, <&kp EXCLAMATION>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y      &kp U  &kp I  &kp O  &kp P  &none
&none  &kp A  &kp S  &kp D  &kp F  &kp G        &kp H      &kp J  &kp K  &kp L  &none  &none
&none  &none  &none  &none  &none  &none        &none      &none  &none  &none  &none  &none
                     &none  &none  &kp SPACE    &kp SPACE  &none  &none
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &none         &none         &none         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LS(LA(MINUS))  &none         &none         &none
&none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4          &kp NUMBER_5             &kp NUMBER_6      &kp NUMBER_7       &kp NUMBER_8       &kp NUMBER_9  &kp NUMBER_0  &none
&none  &trans        &trans        &trans        &trans                &trans                   &none             &none              &none              &none         &none         &none
                                   &none         &none                 &kp SPACE                &kp RET           &trans             &none
            >;
        };
    };
};
